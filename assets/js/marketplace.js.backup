// Marketplace.js - Script for the dimension marketplace page

document.addEventListener('DOMContentLoaded', function() {
    // Initialize the marketplace
    initMarketplace();
    
    // Add event listeners for filters
    document.getElementById('category-filter').addEventListener('change', filterDimensions);
    document.getElementById('sort-filter').addEventListener('change', filterDimensions);
    document.getElementById('search-filter').addEventListener('input', filterDimensions);
    
    // Initialize the dimensions in the global object if not already done
    if (!window.multiversMarket) {
        window.multiversMarket = {};
    }
    
    if (!window.multiversMarket.dimensions) {
        window.multiversMarket.dimensions = dimensions;
    }
    
    // Add cart functionality
    window.multiversMarket.addToCart = function(dimensionId) {
        // Get the cart from localStorage or initialize it
        let cart = JSON.parse(localStorage.getItem('multiversCart')) || [];
        
        // Check if the dimension is already in the cart
        const existingItem = cart.find(item => item.id === dimensionId);
        
        if (existingItem) {
            showNotification('This dimension is already in your cart.', 'info');
            return;
        }
        
        // Find the dimension
        const dimension = [...dimensions, ...extendedDimensions].find(d => d.id === dimensionId);
        
        if (dimension) {
            // Add to cart
            cart.push({
                id: dimension.id,
                name: dimension.name,
                price: dimension.price,
                image: dimension.image
            });
            
            // Save to localStorage
            localStorage.setItem('multiversCart', JSON.stringify(cart));
            
            // Update cart count
            updateCartCount();
            
            // Show notification
            showNotification(`${dimension.name} has been added to your cart.`, 'success');
        }
    };
});

// Base dimensions data
const dimensions = [
    {
        id: 1,
        name: "Crystalline Nexus",
        description: "A world where everything is made of living crystals that respond to thoughts and emotions.",
        price: "8.5 ETH",
        image: "assets/svg/dimension1.svg",
        category: "Harmonic"
    },
    {
        id: 2,
        name: "Quantum Foam",
        description: "A dimension existing at the quantum level where probability is the only constant.",
        price: "12.3 ETH",
        image: "assets/svg/dimension2.svg",
        category: "Altered Physics"
    },
    {
        id: 3,
        name: "Bioluminescent Abyss",
        description: "An ocean world where light is produced by living organisms creating complex communication networks.",
        price: "9.7 ETH",
        image: "assets/svg/dimension3.svg",
        category: "Biological"
    },
    {
        id: 4,
        name: "Plasma Nebula",
        description: "A gaseous dimension where consciousness can manipulate energy flows directly.",
        price: "15.1 ETH",
        image: "assets/svg/dimension4.svg",
        category: "Energetic"
    }
];

// Extended dimensions for pagination
const extendedDimensions = [
    {
        id: 5,
        name: "Suspended Chronos",
        description: "Dimension where time is not linear but folds like fabric, creating pockets of past and future.",
        price: "19.2 ETH",
        image: "assets/svg/dimension5.svg",
        category: "Temporal"
    },
    {
        id: 6,
        name: "Stellar Ocean",
        description: "A world entirely composed of luminous water where stars are born and die beneath the surface.",
        price: "13.7 ETH",
        image: "assets/svg/dimension6.svg",
        category: "Harmonic"
    },
    {
        id: 7,
        name: "Nano-Civilization",
        description: "Miniature dimension where an entire civilization exists at the microscopic scale.",
        price: "7.9 ETH",
        image: "assets/svg/dimension7.svg",
        category: "Biological"
    },
    {
        id: 8,
        name: "Inverted Terra",
        description: "World where the inside and outside are reversed - you live inside a hollow sphere.",
        price: "11.4 ETH",
        image: "assets/svg/dimension8.svg",
        category: "Altered Physics"
    },
    {
        id: 9,
        name: "Magnetic Pulse",
        description: "Dimension dominated by immense visible magnetic fields that sculpt the landscape.",
        price: "14.8 ETH",
        image: "assets/svg/dimension9.svg",
        category: "Energetic"
    },
    {
        id: 10,
        name: "Terra Cognita",
        description: "World where thoughts materialize instantly, creating a constantly evolving landscape.",
        price: "22.5 ETH",
        image: "assets/svg/dimension10.svg",
        category: "Harmonic"
    },
    {
        id: 11,
        name: "Eternal Echo",
        description: "Dimension where sound is visible and permanent, creating complex architectural structures.",
        price: "16.3 ETH",
        image: "assets/svg/dimension11.svg",
        category: "Energetic"
    },
    {
        id: 12,
        name: "Stable Antimatter",
        description: "Universe composed exclusively of stabilized antimatter, offering infinite energy possibilities.",
        price: "25.0 ETH",
        image: "assets/svg/dimension12.svg",
        category: "Altered Physics"
    }
];

// Initialize the marketplace
function initMarketplace() {
    // Combine all dimensions
    const allDimensions = [...dimensions, ...extendedDimensions];
    
    // Display dimensions
    displayDimensions(allDimensions);
    
    // Update pagination
    updatePagination(1, Math.ceil(allDimensions.length / 8));
    
    // Update cart count
    updateCartCount();
}

// Display dimensions in the grid
function displayDimensions(dimensionsToDisplay) {
    const container = document.getElementById('dimensions-container');
    
    // Clear loading spinner
    container.innerHTML = '';
    
    if (dimensionsToDisplay.length === 0) {
        container.innerHTML = '<div class="no-results">No dimensions match your criteria. Try adjusting your filters.</div>';
        return;
    }
    
    // Display each dimension
    dimensionsToDisplay.forEach(dimension => {
        const dimensionCard = createDimensionCard(dimension);
        container.appendChild(dimensionCard);
    });
}

// Create a dimension card element
function createDimensionCard(dimension) {
    const card = document.createElement('div');
    card.className = 'dimension-card';
    card.setAttribute('data-category', dimension.category);
    
    card.innerHTML = `
        <div class="dimension-image">
            <object data="${dimension.image}" type="image/svg+xml"></object>
        </div>
        <div class="dimension-info">
            <h3>${dimension.name}</h3>
            <p>${dimension.description}</p>
            <div class="dimension-meta">
                <span class="dimension-category">${dimension.category}</span>
                <span class="dimension-price">${dimension.price}</span>
            </div>
            <div class="dimension-actions">
                <a href="dimension.html?id=${dimension.id}" class="btn btn-secondary">View Details</a>
                <button class="btn btn-primary add-to-cart" data-id="${dimension.id}">Add to Cart</button>
            </div>
        </div>
    `;
    
    // Add event listener for the add to cart button
    const addToCartBtn = card.querySelector('.add-to-cart');
    addToCartBtn.addEventListener('click', function() {
        const dimensionId = parseInt(this.getAttribute('data-id'));
        window.multiversMarket.addToCart(dimensionId);
    });
    
    return card;
}

// Filter dimensions based on user selections
function filterDimensions() {
    const categoryFilter = document.getElementById('category-filter').value;
    const sortFilter = document.getElementById('sort-filter').value;
    const searchFilter = document.getElementById('search-filter').value.toLowerCase();
    
    // Combine all dimensions
    let allDimensions = [...dimensions, ...extendedDimensions];
    
    // Filter by category
    if (categoryFilter !== 'all') {
        allDimensions = allDimensions.filter(dimension => dimension.category === categoryFilter);
    }
    
    // Filter by search term
    if (searchFilter) {
        allDimensions = allDimensions.filter(dimension => 
            dimension.name.toLowerCase().includes(searchFilter) || 
            dimension.description.toLowerCase().includes(searchFilter)
        );
    }
    
    // Sort dimensions
    sortDimensions(allDimensions, sortFilter);
    
    // Display filtered dimensions
    displayDimensions(allDimensions);
    
    // Update pagination
    updatePagination(1, Math.ceil(allDimensions.length / 8));
}

// Sort dimensions based on the selected sort option
function sortDimensions(dimensionsToSort, sortOption) {
    switch (sortOption) {
        case 'name-asc':
            dimensionsToSort.sort((a, b) => a.name.localeCompare(b.name));
            break;
        case 'name-desc':
            dimensionsToSort.sort((a, b) => b.name.localeCompare(a.name));
            break;
        case 'price-asc':
            dimensionsToSort.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));
            break;
        case 'price-desc':
            dimensionsToSort.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));
            break;
        case 'new':
            dimensionsToSort.sort((a, b) => b.id - a.id);
            break;
        default:
            break;
    }
}

// Update pagination controls
function updatePagination(currentPage, totalPages) {
    const paginationElement = document.querySelector('.pagination');
    const currentPageElement = paginationElement.querySelector('.current-page');
    const totalPagesElement = paginationElement.querySelector('.total-pages');
    const prevBtn = paginationElement.querySelector('.prev-btn');
    const nextBtn = paginationElement.querySelector('.next-btn');
    
    currentPageElement.textContent = currentPage;
    totalPagesElement.textContent = totalPages;
    
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages;
    
    // Add event listeners for pagination buttons
    prevBtn.onclick = () => {
        if (currentPage > 1) {
            updatePagination(currentPage - 1, totalPages);
        }
    };
    
    nextBtn.onclick = () => {
        if (currentPage < totalPages) {
            updatePagination(currentPage + 1, totalPages);
        }
    };
}

// Update cart count
function updateCartCount() {
    const cart = JSON.parse(localStorage.getItem('multiversCart')) || [];
    const cartCountElement = document.querySelector('.cart-count');
    
    if (cartCountElement) {
        cartCountElement.textContent = cart.length;
    }
}

// Show notification
function showNotification(message, type = 'info') {
    // Check if notification container exists
    let notificationContainer = document.querySelector('.notification-container');
    
    // Create container if it doesn't exist
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.className = 'notification-container';
        document.body.appendChild(notificationContainer);
    }
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <p>${message}</p>
        </div>
        <button class="notification-close">×</button>
    `;
    
    // Add to container
    notificationContainer.appendChild(notification);
    
    // Add event listener for close button
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', function() {
        notification.classList.add('fade-out');
        setTimeout(() => {
            notification.remove();
        }, 300);
    });
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.classList.add('fade-out');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }
    }, 5000);
}
